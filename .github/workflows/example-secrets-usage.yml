# Example GitHub Actions Workflow Using Secrets
# This demonstrates how to use GitHub Secrets in workflows

name: Example - Using Environment Secrets

# Trigger conditions (customize as needed)
on:
  workflow_dispatch:  # Manual trigger via GitHub UI
  # push:
  #   branches: [ main ]
  # schedule:
  #   - cron: '0 0 * * *'  # Daily at midnight

jobs:
  example-job:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use secrets in environment
        env:
          # GitHub Secrets are accessed via ${{ secrets.SECRET_NAME }}
          DBT_CLOUD_API_TOKEN: ${{ secrets.DBT_CLOUD_API_TOKEN }}
          DBT_CLOUD_ACCOUNT_ID: ${{ secrets.DBT_CLOUD_ACCOUNT_ID }}
          DBT_PROJECT_DIR: ${{ secrets.DBT_PROJECT_DIR }}
        run: |
          echo "âœ… Secrets are loaded in environment variables"
          echo "Account ID: $DBT_CLOUD_ACCOUNT_ID"
          echo "Project Dir: $DBT_PROJECT_DIR"
          # API token is accessible but not printed (security best practice)

          # Example: Use secrets in your commands
          # dbt run --profiles-dir . --project-dir $DBT_PROJECT_DIR

      - name: Example - Run commands with secrets
        env:
          DBT_CLOUD_API_TOKEN: ${{ secrets.DBT_CLOUD_API_TOKEN }}
          DBT_CLOUD_ACCOUNT_ID: ${{ secrets.DBT_CLOUD_ACCOUNT_ID }}
        run: |
          # Your automated tasks here
          echo "Running automated tasks with secure credentials..."

          # Example API call (replace with actual usage)
          # curl -H "Authorization: Bearer $DBT_CLOUD_API_TOKEN" \
          #      https://cloud.getdbt.com/api/v2/accounts/$DBT_CLOUD_ACCOUNT_ID/jobs/
